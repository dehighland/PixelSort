[{"name": "app.py", "content": "import cv2\nimport os\nimport sys\nimport numpy as np\nimport io\nimport base64\nfrom PIL import Image\nfrom shiny import App, reactive, render, ui, render_image\nfrom shiny.types import FileInfo\n\napp_ui = ui.page_sidebar(\n    # Parameter Sidebar\n    ui.sidebar(\n        ui.input_file('dataupload', 'Upload Image',\n                      multiple=False, accept=['.jpeg','.jpg','.png']\n        ),\n        \n        ui.input_selectize(\"sortcolor\", \"Select Sort Channel:\",  \n        {\"red\": \"Red\", \"green\": \"Green\", \"blue\": \"Blue\",\n         \"hue\": \"Hue\", \"saturation\": \"Saturation\", \"lightness\": \"Lightness\"} \n        ),\n        ui.input_selectize(\"sortdirec\", \"Select Sort Direction:\",  \n        {\"up\": \"Bottom-to-Top\", \"down\": \"Top-to-Bottom\",\n         \"right\": \"Left-to-Right\", \"left\": \"Right-to-Left\"}\n        ),\n        ui.input_slider(\"threshold\", \"Threshold Range\", min=0, max=255, value=[0, 255]),\n        ui.input_switch(\"applysort\", \"Pixel Sort!\", False),\n        title=\"Pixel Sort Parameters\",\n    ),\n    \n    # Upload and Display\n    ui.card(\n        ui.output_ui(\"display_img\"),\n    ),\n    fillable=True,\n)\n\n\ndef server(input, output, session):\n    def image_to_base64(image):\n        _, buffer = cv2.imencode('.png', image)\n        img_bytes = buffer.tobytes()\n        return base64.b64encode(img_bytes).decode()\n\n    def grab_cv2img_col(cv2_img, colidx):\n        output = [0] * len(cv2_img)\n        for rowidx in range(len(output)):\n            output[rowidx] = cv2_img[rowidx][colidx]\n        return(output)\n\n    def replace_cv2img_col(cv2_img, colidx, newcol):\n        for rowidx in range(len(newcol)):\n            cv2_img[rowidx][colidx] = newcol[rowidx]\n        return(cv2_img)\n\n    def sort_img_column(img_col, color_value_idx=None, lower_thresh=None, upper_thresh=None):\n        # Get sortable values (no threshold yet)\n        if color_value_idx is None or type(img_col[0]) == np.uint8: # for black/white images, just use the values there\n            simple_col = img_col\n        else:\n            simple_col = [0] * len(img_col) # pull value at desired index for rgb of hsv images\n            for idx in range(len(img_col)):\n                simple_col[idx] = img_col[idx][color_value_idx]\n\n        # Set lower threshold if None\n        if lower_thresh is None:\n            lower_thresh = min(simple_col)\n        \n        # Set upper threshold if None\n        if upper_thresh is None:\n            upper_thresh = max(simple_col)\n\n        # Get intervals for sorting (control variables)\n        interval_values, interval_start_idxs = [], [] # store the simple_col values and the index the intervals start at\n        mid_interval_flag = False # communicates if we are in an interval\n        \n        # Get intervals for sorting (loop)\n        for idx in range(len(simple_col)):\n            thresh_bool = simple_col[idx] > lower_thresh and simple_col[idx] < upper_thresh # value is within thresholds\n            \n            if thresh_bool and mid_interval_flag is False: # Start a new interval\n                interval_start_idxs.append(idx)\n                interval_values.append([simple_col[idx]])\n                mid_interval_flag = True\n                \n            elif thresh_bool and mid_interval_flag is True: # Add to current interval\n                interval_values[-1].append(simple_col[idx])\n\n            elif (not thresh_bool) and mid_interval_flag is True: # End current interval\n                mid_interval_flag = False\n\n        # Assemble sorted column control variables\n        newcol = [0] * len(img_col) # ultimate output\n        next_interval = 0 # idx of interval in interval_values and interal_start_idxs to use at a given time\n        merge_idx = 0 # idx for newcol placement\n\n        # Assemble sorted column loop\n        while merge_idx < len(simple_col):\n            if next_interval < len(interval_values) and merge_idx == interval_start_idxs[next_interval]: # if at an interval\n                sort_key = np.argsort(interval_values[next_interval]) + merge_idx # get sorted indexes \n                \n                for idx in range(len(interval_values[next_interval])): # add each img_col value(s) per sorted index\n                    newcol[merge_idx + idx] = img_col[sort_key[idx]]\n                            \n                merge_idx += len(interval_values[next_interval]) # move merge_idx past the interval\n                next_interval += 1\n            else:\n                newcol[merge_idx] = img_col[merge_idx] # add non-interval values as is\n                merge_idx += 1 # update idx variable\n        \n        return(np.array(newcol))\n         \n    def sort_image(cv2_img):\n        # Select color index and convert to hls if needed\n        if input.sortcolor() == 'red':\n            color_idx = 2\n        elif input.sortcolor() == 'green':\n            color_idx = 1\n        elif input.sortcolor() == 'blue':\n            color_idx = 0\n        elif input.sortcolor() == 'hue':\n            cv2_img = cv2.cvtColor(cv2_img, cv2.COLOR_BGR2HLS)\n            color_idx = 0\n        elif input.sortcolor() == 'saturation':\n            cv2_img = cv2.cvtColor(cv2_img, cv2.COLOR_BGR2HLS)\n            color_idx = 2\n        else:\n            cv2_img = cv2.cvtColor(cv2_img, cv2.COLOR_BGR2HLS)\n            color_idx = 1\n            \n        # Rotate image to allow different sort directions\n        if input.sortdirec() == \"left\":\n            cv2_img = cv2.rotate(cv2_img, cv2.ROTATE_90_CLOCKWISE)\n        elif input.sortdirec() == \"up\":\n            cv2_img = cv2.rotate(cv2_img, cv2.ROTATE_180)\n        elif input.sortdirec() == \"right\":\n            cv2_img = cv2.rotate(cv2_img, cv2.ROTATE_90_COUNTERCLOCKWISE)\n\n        for colidx in range(len(cv2_img[0])):\n            grabbed_col = grab_cv2img_col(cv2_img, colidx)\n            grabbed_col = sort_img_column(grabbed_col, color_idx, \n                            input.threshold()[0], input.threshold()[1])\n            output = replace_cv2img_col(cv2_img, colidx, grabbed_col)\n            \n        # Unrotate image\n        if input.sortdirec() == \"left\":\n            output = cv2.rotate(output, cv2.ROTATE_90_COUNTERCLOCKWISE)\n        elif input.sortdirec() == \"up\":\n            output = cv2.rotate(output, cv2.ROTATE_180)\n        elif input.sortdirec() == \"right\":\n            output = cv2.rotate(output, cv2.ROTATE_90_CLOCKWISE)\n            \n        # Unconvert colors if needed\n        if input.sortcolor() in ('hue', 'saturation', 'lightness'):\n            output = cv2.cvtColor(output, cv2.COLOR_HLS2BGR)\n        \n        return(output)\n        \n    @reactive.calc\n    def rawdata():\n        file: list[FileInfo] | None = input.dataupload()\n        if file is None:\n            return cv2.imread('./ExampleImage.jpg')\n        datapath = file[0][\"datapath\"]\n        return cv2.imread(datapath)\n    \n    @render.ui \n    def display_img():\n        if input.applysort():\n            img = sort_image(rawdata())\n        else:\n            img = rawdata()\n        \n        # Convert the image to base64\n        img = image_to_base64(img)\n        return ui.img(src=f\"data:image/png;base64,{img}\", alt=\"Display Image/Frame\")\n\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "ExampleImage.jpg", "content": "", "type": "binary"}]